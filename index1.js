process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const text = require("./const");
const { message } = require("telegraf/filters");
const faqText = require("./const");

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) =>
  ctx.reply(`–í—ñ—Ç–∞—é 
 ${
   ctx.message.from.first_name || ctx.message.from.username || "–¥—Ä—É–∂–µ"
 }! –Ø —Ç–µ—Å—Ç–æ–≤–∏–π –±–æ—Ç –Ñ—Ñ–∞—Ä–º–∞, –ø—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å!`)
);
bot.help((ctx) =>
  ctx.reply(
    "–í–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è? –ë—É–¥—å –ª–∞—Å–∫–∞ –æ–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ —ñ –º–∏ —Å–ø—Ä–æ–±—É—î–º–æ —ó—ó —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –≤–∏—Ä—ñ—à–∏—Ç–∏"
  )
);

bot.command("menu", async (ctx) => {
  try {
    await ctx.replyWithHTML(
      "<b>–ú–µ–Ω—é</b>",
      Markup.inlineKeyboard([
        [
          Markup.button.callback("–ù–æ–≤–∏–Ω–∏", "btn_news"),
          Markup.button.callback("–ê–∫—Ü—ñ—ó", "btn_2"),
        ],
        [
          Markup.button.callback("–ß–∞–ü–∏", "btn_faq"),
          Markup.button.callback("–ü–∞—Ä—Ç–Ω–µ—Ä–∏", "btn_4"),
        ],
        [
          Markup.button.callback(
            "–ü—Ä–æ–≥—Ä–∞–º–∏ (–ù–∞–π—Å–≤—ñ–∂—ñ—à—ñ –Ω–æ–≤–∏–Ω–∏ –£–∫—Ä–∞—ó–Ω–∏)",
            "btn_5"
          ),
        ],
      ])
    );
  } catch (e) {
    console.error(e);
  }
});

function addActionBot(name, src, text) {
  bot.action(name, async (ctx) => {
    try {
      await ctx.answerCbQuery();
      if (src !== false) {
        await ctx.replyWithPhoto({ source: src });
      }
      await ctx.replyWithHTML(text, {
        disable_web_page_preview: true,
      });
    } catch (e) {
      console.error(e);
    }
  });
}
// addActionBot("btn_news", false, "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–∫—Ä—Ç–∏—Ç–æ–á –≥—Ä—É–ø–∏");
bot.action("btn_news", async (ctx) => {
  try {
    await ctx.answerCbQuery();
    await ctx.replyWithHTML(
      "—Ç—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –∑–∞–∫—Ä–∏—Ç–æ—ó –≥—Ä—É–ø–ø–∏ –Ω–æ–≤–∏–Ω, –¥–ª—è —Ü—å–æ–≥–æ –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–ø—ñ–¥—Å–∫–∞–∑–∫–∞ 12345)",
      Markup.inlineKeyboard([
        [Markup.button.callback("–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å", "btn_news_password")],
      ])
    );
  } catch (e) {
    console.error(e);
  }
});
// –ö–æ–º–∞–Ω–¥–∞ —ç—Ö–æ "/echo [—á—Ç–æ-–Ω–∏–±—É–¥—å]"
// bot.onText(/\/echo (.+)/, (msg, match) => {
// 'msg' —ç—Ç–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
// 'match' —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—ã—à–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
// —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
//   const chatId = msg.chat.id;
//   const resp = match[1]; // –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º "—á—Ç–æ-–Ω–∏–±—É–¥—å"
//   bot.sendMessage(chatId, resp); //–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç "—á—Ç–æ-–Ω–∏–±—É–¥—å"
// });
addActionBot("btn_faq", false, faqText.faqText);
bot.action("btn_news_password", async (ctx) => {
  bot.hears("12345", async (ctx) => {
    try {
      await ctx.reply("–í—ñ—Ç–∞—é");
    } catch (e) {
      console.error(e);
    }
  });
});

// bot.on(message('sticker'), (ctx) => ctx.reply('üëç'));
// bot.hears('hi', (ctx) => ctx.reply('Hey there'));

bot.launch();

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
